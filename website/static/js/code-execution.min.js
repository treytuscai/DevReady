async function executeCode(endpoint,isSubmission=false){const questionElem=document.getElementById("question-title");const questionId=questionElem?questionElem.dataset.questionId:null;if(!questionId)return alert("No question selected!");const editor=ace.edit("editor");const code=editor.getValue();const language=document.getElementById("language-select").value.toLowerCase();const outputContainer=document.getElementById('output-container');const errorContainer=document.getElementById('stderr-container');const errorText=document.getElementById('stderr-text');const testCaseButtons=document.getElementById('test-case-buttons');const testCaseStatus=document.getElementById('test-case-status');testCaseStatus.innerHTML="";if(isSubmission){testCaseStatus.innerHTML=`<div class="d-flex align-items-center gap-2"><span>Running Tests...</span><div class="spinner-border text-primary"role="status"><span class="visually-hidden">Loading...</span></div></div>`;}
try{const res=await fetch(`/${endpoint}/${questionId}`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({code,language}),});const result=await res.json();isSubmission?displaySubmissionResults(result.results):displayRunResults(result.results);}catch(error){outputContainer.style.display="none";errorContainer.style.display="block";errorText.innerHTML=`<pre class="text-danger">Error:${error.message}</pre>`;}}
function displayRunResults(results){const buttons=document.querySelectorAll("#test-case-buttons button");results.forEach((test,i)=>{if(i<buttons.length){const btn=buttons[i];btn.className=test.passed?"btn-testcase-pass":"btn-testcase-fail";btn.onclick=()=>showTestCase(test.stderr,test.input,test.stdout,test.output,test.expected,btn,false);}});showTestCase(results[0].stderr,results[0].input,results[0].stdout,results[0].output,results[0].expected,buttons[0],false);}
function displaySubmissionResults(results){const testCaseStatus=document.getElementById('test-case-status');testCaseStatus.innerHTML="";const passedCases=results.filter(test=>test.passed).length;const totalCases=results.length;if(passedCases===totalCases){const checkmark=document.getElementById('checkmark')
checkmark.innerHTML="âœ…"
const testCaseStatus=document.getElementById('test-case-status');testCaseStatus.innerHTML="";const rowDiv=document.createElement('div');rowDiv.classList.add('d-flex','align-items-center','justify-content-between','gap-4');const leftDiv=document.createElement('div');const successMessage=document.createElement('div');successMessage.style.color="#00c851";successMessage.style.fontFamily="Inter, sans-serif";successMessage.style.fontWeight="600";successMessage.textContent="Successful Submission!";leftDiv.appendChild(successMessage);const passMessage=document.createElement('div');passMessage.style.color="#00c851";passMessage.style.fontFamily="Inter, sans-serif";passMessage.style.fontWeight="600";passMessage.textContent=`${passedCases}/${totalCases}Tests Passed`;leftDiv.appendChild(passMessage);const rightDiv=document.createElement('div');const analyzeBtn=document.createElement('button');analyzeBtn.id='analyze-btn';analyzeBtn.className='btn btn-submit';analyzeBtn.textContent='Analyze Time Complexity';analyzeBtn.onclick=analyzeTimeComplexity;analyzeBtn.setAttribute('data-bs-toggle','modal');analyzeBtn.setAttribute('data-bs-target','#complexityModal');rightDiv.appendChild(analyzeBtn);rowDiv.appendChild(leftDiv);rowDiv.appendChild(rightDiv);testCaseStatus.appendChild(rowDiv);if(!document.getElementById('complexityModal')){createComplexityModal();}}else{const failMessage=document.createElement('span');failMessage.style.color="red";failMessage.style.fontFamily="Inter, sans-serif";failMessage.style.fontWeight="600";failMessage.textContent=`${passedCases}/${totalCases}Tests Passed`;testCaseStatus.appendChild(failMessage);}}
function createComplexityModal(){const modal=document.createElement('div');modal.className='modal fade';modal.id='complexityModal';modal.tabIndex='-1';modal.setAttribute('aria-labelledby','complexityModalLabel');modal.setAttribute('aria-hidden','true');modal.innerHTML=`<div class="modal-dialog"><div class="modal-content"><div class="modal-header"><h5 class="modal-title"id="complexityModalLabel">Time Complexity Analysis</h5><button type="button"class="btn-close"data-bs-dismiss="modal"aria-label="Close"></button></div><div class="modal-body"id="complexity-modal-body"style="font-family: Inter, sans-serif;"><div class="d-flex justify-content-center"><div class="simple-spinner"></div></div></div><div class="modal-footer"><button type="button"class="btn btn-secondary"data-bs-dismiss="modal">Close</button></div></div></div>`;document.body.appendChild(modal);}
async function analyzeTimeComplexity(){const questionDescriptionElement=document.getElementById("question-description");const questionDescription=questionDescriptionElement?questionDescriptionElement.textContent.trim():null;const editor=ace.edit("editor");const code=editor.getValue();const payload={"code":code,"question_description":questionDescription};const modalBody=document.getElementById('complexity-modal-body');modalBody.innerHTML=`<div class="d-flex justify-content-center"><div class="spinner-border text-orange"role="status"><span class="visually-hidden">Loading...</span></div></div>`;try{const res=await fetch(`/analyze_submission`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(payload),});const result=await res.json();modalBody.innerHTML=`<div class="mb-3"style="font-family: Inter, sans-serif;"><span class="fw-bold">Time Complexity:</span><span>${result.analysis.timeComplexity||'Not determined'}</span></div><div class="mb-3"style="font-family: Inter, sans-serif;"><span class="fw-bold">Space Complexity:</span><span>${result.analysis.spaceComplexity||'Not determined'}</span></div>${result.analysis.explanation?`<div class="mt-4"style="font-family: Inter, sans-serif;"><h6 class="fw-bold">Explanation:</h6><div class="p-3 bg-light border rounded">${result.analysis.explanation}</div></div>`:''}`;}catch(error){modalBody.innerHTML=`<div class="alert alert-danger"style="font-family: Inter, sans-serif;"><strong>Error:</strong>Could not analyze time complexity.<div class="mt-2">${error.message}</div></div>`;}}
function showTestCase(stderr,input,stdout,output,expected,activeButton,initial=false){let stderrContainer=document.getElementById("stderr-container");let stderrText=document.getElementById("stderr-text");document.getElementById("expected-text").innerHTML=`${expected}`;document.getElementById("input-text").innerHTML=`${input}`;let stdoutContainer=document.getElementById("stdout-container");let stdoutText=document.getElementById("stdout-text");const outputContainer=document.getElementById('output-container');const outputText=document.getElementById('output-text');document.querySelectorAll("#test-case-buttons button").forEach(btn=>{btn.classList.remove("btn-primary","active");});if(activeButton&&activeButton.classList){activeButton.classList.add("btn-primary","active");}
if(stderr){outputContainer.style.display="none";stdoutContainer.style.display="none";stderrText.innerHTML=stderr;stderrContainer.style.display="block";return;}else{stderrContainer.style.display="none";}
if(stdout){stdoutContainer.style.display="block";stdoutText.innerHTML=formatOutput(stdout);}else if(!initial){stdoutContainer.style.display="none";}
if(!initial){outputContainer.style.display="block";outputText.innerHTML=formatOutput(output);}else{outputContainer.style.display="none";}}
document.addEventListener('DOMContentLoaded',function(){const testButtons=document.querySelectorAll("#test-case-buttons button");if(testButtons.length>0){const firstButton=testButtons[0];if(typeof firstButton.onclick==='function'){firstButton.onclick();}}});function formatOutput(value){if(typeof value==='string'&&value.includes('j')){return`"${value}"`;}
if(typeof value==='string'){return`"${value}"`;}
else if(Array.isArray(value)){return`[${value.map(formatOutput).join(', ')}]`;}
else if(value===null){return'null';}
else{return String(value);}}